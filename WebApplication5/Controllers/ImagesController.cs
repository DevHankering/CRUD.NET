using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication5.Data;
using WebApplication5.DTO;
using WebApplication5.Models;

namespace WebApplication5.Controllers
{


    [Route("api/[controller]")]
    [ApiController]
    public class ImagesController : ControllerBase
    {
        private readonly IWebHostEnvironment webHostEnvironment;
        private readonly IHttpContextAccessor httpContextAccessor;
        private readonly DataDbContext dbContext;

        public ImagesController(IWebHostEnvironment webHostEnvironment, IHttpContextAccessor httpContextAccessor, DataDbContext dbContext)
        {
            this.webHostEnvironment = webHostEnvironment;
            this.httpContextAccessor = httpContextAccessor;
            this.dbContext = dbContext;
        }

        [HttpPost]
        [Route("Upload")]
        public async Task<IActionResult> Upload([FromForm] ImageUploadRequestDto request)
        {

            ValidateFileUpload(request);
            if (ModelState.IsValid)   // ModelState.IsValid return boolean vlaue
            {
                //user repository to upload image 
                // convert Dto to domain model
                var imageDomainModel = new Image
                {
                    File = request.File,
                    FileExtension = Path.GetExtension(request.File.FileName),
                    FileSizeInBytes = request.File.Length, // request.File.Length --> it is generated by the system
                    FileName = request.FileName, // request.FileName --> because it is given by user.
                    FileDescription = request.FileDescription,
                };

                var localFilePath = Path.Combine(webHostEnvironment.ContentRootPath, "Images", $"{request.FileName}{Path.GetExtension(request.File.FileName)}");// webHostEnvironment.ContenRootPath is used to navigate the path , Images is folderName,  request.FileName is the file name., 

                //upload image to lacal path
                using var stream = new FileStream(localFilePath, FileMode.Create); //FileMode.Create creates the folder and file --> thtis line generally creates the file and folder into your local machine
                await request.File.CopyToAsync(stream); // --> this puts the file into stream. // these two lines, we are going to upload the image.


                //creating a path for our file
                //https://localhost:1234/images/image.jpg
                var urlFilePath = $"{httpContextAccessor.HttpContext.Request.Scheme}://{httpContextAccessor.HttpContext.Request.Host}{httpContextAccessor.HttpContext.Request.PathBase}/Images/{request.FileName}{Path.GetExtension(request.File.FileName)}";

                imageDomainModel.FilePath = urlFilePath;
                await dbContext.Images.AddAsync(imageDomainModel);
                await dbContext.SaveChangesAsync();

                return Ok(imageDomainModel);
            }
            return BadRequest(ModelState);
        }

        //Here we are adding vaidation for ImageUloadRequestDto;
        private void ValidateFileUpload(ImageUploadRequestDto request)
        {
            var allowedExtensions = new string[] { ".jpg", "jpeg", ".png", ".pdf", ".PNG" };

            if (!allowedExtensions.Contains(Path.GetExtension(request.File.FileName)))
            {
                ModelState.AddModelError("file", "Unsupported file extension"); // it takes two parameters one is the key and the other is errorMessage

            }
            if (request.File.Length > 10485760)
            {
                ModelState.AddModelError("file", "File size more than 10MB, Please upload a smaller size file");
            }
        }



        [HttpGet]
        [Route("GetAll")]

        public async Task<IActionResult> GetAll()
        {
            var GetImages = await dbContext.Images.ToListAsync();

            return Ok(GetImages);
        }
    }
}
